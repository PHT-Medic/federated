# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import aggregator_pb2 as aggregator__pb2


class AggregatorStub(object):
    """Aggregator service interface

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitMaskedInput = channel.unary_unary(
                '/aggregator.Aggregator/SubmitMaskedInput',
                request_serializer=aggregator__pb2.MaskedInput.SerializeToString,
                response_deserializer=aggregator__pb2.MaskedInputResponse.FromString,
                )
        self.DistributeAggregatedInput = channel.unary_unary(
                '/aggregator.Aggregator/DistributeAggregatedInput',
                request_serializer=aggregator__pb2.AggregatedInputRequest.SerializeToString,
                response_deserializer=aggregator__pb2.AggregatedInputResponse.FromString,
                )
        self.SubscribeForTrain = channel.stream_stream(
                '/aggregator.Aggregator/SubscribeForTrain',
                request_serializer=aggregator__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=aggregator__pb2.TrainEvent.FromString,
                )


class AggregatorServicer(object):
    """Aggregator service interface

    """

    def SubmitMaskedInput(self, request, context):
        """Process and store submitted masked input
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DistributeAggregatedInput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeForTrain(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AggregatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitMaskedInput': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitMaskedInput,
                    request_deserializer=aggregator__pb2.MaskedInput.FromString,
                    response_serializer=aggregator__pb2.MaskedInputResponse.SerializeToString,
            ),
            'DistributeAggregatedInput': grpc.unary_unary_rpc_method_handler(
                    servicer.DistributeAggregatedInput,
                    request_deserializer=aggregator__pb2.AggregatedInputRequest.FromString,
                    response_serializer=aggregator__pb2.AggregatedInputResponse.SerializeToString,
            ),
            'SubscribeForTrain': grpc.stream_stream_rpc_method_handler(
                    servicer.SubscribeForTrain,
                    request_deserializer=aggregator__pb2.SubscribeRequest.FromString,
                    response_serializer=aggregator__pb2.TrainEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aggregator.Aggregator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Aggregator(object):
    """Aggregator service interface

    """

    @staticmethod
    def SubmitMaskedInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aggregator.Aggregator/SubmitMaskedInput',
            aggregator__pb2.MaskedInput.SerializeToString,
            aggregator__pb2.MaskedInputResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DistributeAggregatedInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aggregator.Aggregator/DistributeAggregatedInput',
            aggregator__pb2.AggregatedInputRequest.SerializeToString,
            aggregator__pb2.AggregatedInputResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeForTrain(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/aggregator.Aggregator/SubscribeForTrain',
            aggregator__pb2.SubscribeRequest.SerializeToString,
            aggregator__pb2.TrainEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
