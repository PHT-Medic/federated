syntax = "proto3";

package aggregator;


// Aggregator service interface

service Aggregator {
  // Process and store submitted masked input
  rpc SubmitMaskedInput(MaskedInput) returns (MaskedInputResponse) {}

  rpc DistributeAggregatedInput(AggregatedInputRequest) returns (AggregatedInputResponse) {}

  rpc SubscribeForTrain(SubscribeRequest) returns (stream TrainEvent) {}


}

enum TrainStatus {
  ROUND_FINISHED = 0;
  ROUND_IN_PROGRESS = 1;
  ROUND_ERROR = 2;
}

message SubscribeRequest {
  string client_id = 1;
  string train_id = 2;
}

message TrainEvent {
  string train_id = 1;
  int32 round_number = 2;
  TrainStatus status = 3;

}




message Parameters {
  string id = 1;
  optional string name = 2;
  repeated float value = 3;
}

message MaskedInput {
  string client_id = 1;
  string train_id = 2;
  repeated Parameters input = 3;
}

message MaskedInputResponse {
  string train_id = 1;
  bool success = 2;
  bool aggregate_available = 3;
}

message AggregatedInputRequest {
  string train_id = 1;
  string client_id = 2;
}

message AggregatedInputResponse {
  string train_id = 1;
  bool success = 2;
  repeated Parameters parameters = 3;
}

